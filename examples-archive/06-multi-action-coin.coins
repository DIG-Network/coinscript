// Multi-Action Coin
// Demonstrates how to create a coin with multiple spend paths
// The default action runs when no ACTION parameter is provided

coin MultiActionCoin {
    storage {
        // The owner who can perform special actions
        address OWNER = "xch1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqm6ks6e8mvy";
        // Whether the coin is frozen
        bool frozen = false;
    }
    
    // Default action - runs when no ACTION is specified
    action default(bytes32 conditions) {
        // Anyone can spend with default action if not frozen
        require(!frozen, "Coin is frozen");
        conditions;
    }
    
    // Transfer ownership action
    action transfer_ownership(address new_owner, bytes32 conditions) {
        // Only owner can transfer
        require(msg.sender == OWNER, "Only owner can transfer");
        
        // Create announcement of ownership change
        emit OwnershipTransferred(OWNER, new_owner);
        
        // Update owner (would need state layer in practice)
        // OWNER = new_owner;
        
        conditions;
    }
    
    // Freeze the coin
    action freeze_coin() {
        // Only owner can freeze
        require(msg.sender == OWNER, "Only owner can freeze");
        
        // Set frozen state (would need state layer)
        // frozen = true;
        
        emit CoinFrozen();
        
        // Return empty conditions
        "()";
    }
    
    // Burn the coin (destroy it)
    action burn_coin() {
        // Only owner can burn
        require(msg.sender == OWNER, "Only owner can burn");
        
        emit CoinBurned();
        
        // Return no conditions - coin is destroyed
        "()";
    }
    
    // Events
    event OwnershipTransferred(address from, address to);
    event CoinFrozen();
    event CoinBurned();
} 