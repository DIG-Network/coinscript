// Singleton NFT Example
// Demonstrates how @singleton generates both main and launcher puzzles

@singleton
coin SingletonNFT {
    storage {
        address owner = "xch1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqm6ks6e8mvy";
        bytes32 metadataHash = 0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890;
        uint256 royaltyPercentage = 500; // 5%
        address royaltyAddress = "0x1234567890123456789012345678901234567890123456789012345678901234";
    }
    
    action transfer(address newOwner) {
        require(msg.sender == owner, "Only owner can transfer");
        
        // Transfer ownership
        owner = newOwner;
        
        // Create new singleton coin with updated owner
        // For singleton, the puzzle will recreate itself automatically
        send("0x" + "00".repeat(32), 1);
        
        // Pay royalty if this is a sale (simplified)
        // Note: In real implementation, royalty calculation would be part of the conditions
        // For now, we'll send a fixed royalty amount
        if (royaltyPercentage > 0) {
            send(royaltyAddress, 1000);
        }
        
        emit Transfer(msg.sender, newOwner);
    }
    
    action updateMetadata(bytes32 newHash) {
        require(msg.sender == owner, "Only owner can update metadata");
        metadataHash = newHash;
        
        emit MetadataUpdate(newHash);
    }
    
    event Transfer(address from, address to);
    event MetadataUpdate(bytes32 newHash);
} 