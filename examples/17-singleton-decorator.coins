// Singleton Decorator Example
// Demonstrates using @singleton decorator to automatically wrap coin in singleton layer

@singleton
coin SingletonToken {
    storage {
        address owner = "xch1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqm6ks6e8mvy";
        uint256 totalSupply = 1000000;
    }
    
    state {
        uint256 currentSupply;
        mapping(address => uint256) balances;
    }
    
    event Minted(address to, uint256 amount);
    event Transferred(address from, address to, uint256 amount);
    
    @onlyAddress(owner)
    action mint(address to, uint256 amount) {
        require(currentSupply + amount <= totalSupply, "Exceeds max supply");
        
        currentSupply += amount;
        balances[to] += amount;
        
        emit Minted(to, amount);
        
        // Return conditions for spending
        conditions;
    }
    
    action transfer(address to, uint256 amount) {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        
        balances[msg.sender] -= amount;
        balances[to] += amount;
        
        emit Transferred(msg.sender, to, amount);
        
        conditions;
    }
}

// You can also provide a specific launcher ID
@singleton(0x1234567890123456789012345678901234567890123456789012345678901234)
coin NamedSingleton {
    storage {
        address owner = "xch1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqm6ks6e8mvy";
    }
    
    action spend() {
        require(msg.sender == owner, "Not owner");
        conditions;
    }
} 