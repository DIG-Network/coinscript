// Example 04: Multiple Actions
// Shows how to create coins with different spend paths

coin MultipleActions {
    storage address owner = "xch1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqm6ks6e8mvy";
    
    // Default action - runs when no action name specified
    action default(bytes32 conditions) {
        // Anyone can use the default action
        conditions;
    }
    
    // Named action - requires ACTION parameter in solution
    action ownerSpend(bytes32 conditions) {
        require(msg.sender == owner, "Not owner");
        conditions;
    }
    
    // Action with parameters
    action transfer(address recipient, uint256 amount) {
        // Anyone can transfer, but let's log who did it
        send(recipient, amount);
        
        // Create an announcement with the sender
        emit Transfer(msg.sender, recipient, amount);
    }
    
    // Administrative action
    action burn() {
        require(msg.sender == owner, "Only owner can burn");
        // Don't create any outputs - coin is destroyed
        // Return empty conditions
        "()";
    }
    
    // Events for logging
    event Transfer(address from, address to, uint256 amount);
    
    // How action routing works:
    // 1. If solution has no ACTION parameter -> run default()
    // 2. If solution has ACTION="ownerSpend" -> run ownerSpend()
    // 3. If solution has ACTION="transfer" -> run transfer()
    // 4. If solution has ACTION="burn" -> run burn()
} 