// Exception Handling Example
// Demonstrates the 'exception' keyword for explicit failure

coin SafeVault {
    storage {
        address owner = "xch1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqm6ks6e8mvy";
        uint256 dailyLimit = 1000000; // 1 XCH daily limit
    }
    
    action withdraw(address to, uint256 amount) {
        // Check ownership
        require(msg.sender == owner, "Only owner can withdraw");
        
        // Validate recipient
        if (to == 0x0000000000000000000000000000000000000000000000000000000000000000) {
            exception("Cannot withdraw to zero address");
        }
        
        // Check daily limit
        if (amount > dailyLimit) {
            exception("Exceeds daily withdrawal limit");
        }
        
        // Process withdrawal
        send(to, amount);
        emit Withdrawal(to, amount);
    }
    
    action emergencyStop() {
        // Only owner can trigger emergency stop
        require(msg.sender == owner, "Only owner can stop");
        
        // This action always fails, effectively locking the vault
        exception("Emergency stop activated - vault is locked");
    }
    
    action validateAddress(address addr) {
        // Example of validation that uses exception for invalid cases
        if (addr == 0x0000000000000000000000000000000000000000000000000000000000000000) {
            exception;  // Fail without message
        }
        
        // If we reach here, address is valid
        emit AddressValidated(addr);
    }
    
    event Withdrawal(address to, uint256 amount);
    event AddressValidated(address addr);
} 