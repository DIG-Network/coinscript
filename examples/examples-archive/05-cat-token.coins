// CAT Token (Chia Asset Token)
// A fungible token with a fixed supply
// Anyone can spend their tokens, but total supply is enforced

coin CATToken {
    storage {
        // TAIL (Token and Asset Issuance Limiter) program hash
        // This determines the token's minting rules
        bytes32 tail_hash = 0x8f4dbff8df4f6d21f3e0ed0e9ce6af7e0e348d23fb3d8e3d600f5a01e826045e;
        
        // Token owner's public key
        bytes32 owner_pubkey = 0xb0aa5f14e53a8e73e8c4b51d6e3c6b366a21273e1dbbe359ad8cc7291cc533e7bfe725245b9c961b6564cc06f491e275;
    }
    
    action spend(bytes32 conditions) {
        // Require signature from token owner
        require(msg.sender == owner_pubkey, "Not token owner");
        
        // CAT layer will enforce:
        // 1. No creation of new tokens (unless TAIL allows)
        // 2. Input amount = output amount
        // 3. All outputs must be CATs with same TAIL
        
        // Return user's conditions (transfers, etc)
        conditions;
    }
    
    // Optional: Add melting capability
    action melt(uint256 amount_to_melt) {
        // Only if TAIL program allows melting
        require(msg.sender == owner_pubkey, "Not token owner");
        
        // Reduce token supply by melting
        // CAT layer will verify with TAIL program
        emit TokensMelted(amount_to_melt);
    }
    
    event TokensMelted(uint256 amount);
} 