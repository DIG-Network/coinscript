// Singleton Coin
// A unique coin that can be tracked across spends
// Uses the singleton layer to ensure only one instance exists

coin SingletonCoin {
    // Add singleton layer with a specific launcher ID
    layer singleton(launcherId: 0x1234567890123456789012345678901234567890123456789012345678901234);
    
    storage {
        // Current owner of the singleton
        address owner = "xch1xf23pd3ludh8chksgaxcs6dkhcwpfm0gv64h02q9rmy6mwwp8w7qtsp7ph";
        
        // Metadata that persists across spends
        uint256 counter = 0;
    }
    
    action spend(address new_owner) {
        // Only current owner can transfer
        require(msg.sender == owner, "Not the owner");
        
        // Create new singleton with updated owner
        // The singleton layer ensures continuity
        send(new_owner, msg.value);
    }
    
    action increment() {
        // Owner can increment the counter
        require(msg.sender == owner, "Not the owner");
        
        // State will be preserved in next singleton
        counter = counter + 1;
        
        // Recreate singleton with same owner but new state
        send(owner, msg.value);
    }
} 