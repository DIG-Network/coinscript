// Example 03: Storage Variables
// Shows different types of immutable storage and how they affect the puzzle

coin StorageVariables {
    // Storage variables are curried into the puzzle at creation time
    // They are IMMUTABLE - changing them creates a different puzzle hash
    
    storage {
        // Addresses - most common storage type
        address owner = "xch1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqm6ks6e8mvy";
        address treasury = "xch1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqm6ks6e8mvy";
        
        // Numbers - for configuration values
        uint256 minAmount = 1000;
        uint256 maxAmount = 1000000;
        uint256 feePercent = 5;
        
        // Booleans - for feature flags
        bool allowTransfers = true;
        bool requireApproval = false;
        
        // Bytes32 - for hashes or identifiers
        bytes32 tokenId = 0x1234567890123456789012345678901234567890123456789012345678901234;
    }
    
    action transfer(address to, uint256 amount) {
        // Access storage variables directly
        require(msg.sender == owner, "Not owner");
        require(allowTransfers, "Transfers disabled");
        require(amount >= minAmount, "Below minimum");
        require(amount <= maxAmount, "Above maximum");
        
        // Calculate fee
        // Note: local variables don't need type declarations
        fee = (amount * feePercent) / 100;
        netAmount = amount - fee;
        
        // Send to recipient and treasury
        send(to, netAmount);
        send(treasury, fee);
    }
    
    // Note: Storage values are part of the puzzle hash
    // Two coins with different storage values are completely different puzzles
} 